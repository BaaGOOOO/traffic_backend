const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const pool = require('./db');

// üîê REGISZTR√ÅCI√ì
router.post('/register', async (req, res) => {
  const { username, email, password } = req.body;

  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const result = await pool.query(
      'INSERT INTO users (name, email, password, role, is_admin) VALUES ($1, $2, $3, $4, $5) RETURNING user_id',
      [username, email, hashedPassword, 'user', false]
    );

    res.json({ userId: result.rows[0].user_id });
  } catch (error) {
    console.error("‚ùå REGISZTR√ÅCI√ìS HIBA:", error.message);
    res.status(500).json({ error: "Hiba a regisztr√°ci√≥ sor√°n." });
  }
});

// üîê BEJELENTKEZ√âS
router.post('/login', async (req, res) => {
  const { username, password } = req.body;

  try {
    const result = await pool.query('SELECT * FROM users WHERE name = $1', [username]);
    if (result.rows.length === 0) {
      return res.status(401).json({ message: 'Hib√°s felhaszn√°l√≥n√©v vagy jelsz√≥.' });
    }

    const user = result.rows[0];
    const match = await bcrypt.compare(password, user.password);
    if (!match) {
      return res.status(401).json({ message: 'Hib√°s felhaszn√°l√≥n√©v vagy jelsz√≥.' });
    }

    // ‚ûï tokenbe belerakjuk a user szerep√©t
    const token = jwt.sign(
      { userId: user.user_id, role: user.role, username: user.name },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    res.json({
      message: 'Sikeres bejelentkez√©s!',
      token,
      role: user.role,
      username: user.name
    });
  } catch (err) {
    console.error('‚ùå Bejelentkez√©si hiba:', err);
    res.status(500).json({ message: 'Hiba a bejelentkez√©s sor√°n.' });
  }
});

// üîí Token valid√°l√°s f√ºggv√©ny
function verifyToken(token) {
  try {
    return jwt.verify(token, process.env.JWT_SECRET); // Titkos√≠t√°shoz haszn√°lt kulcsot itt haszn√°ld
  } catch (err) {
    throw new Error('√ârv√©nytelen token');
  }
}

// üîí ADMIN jogosults√°g middleware
function isAdmin(req, res, next) {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader) return res.status(401).json({ message: 'Nincs token megadva.' });

    const token = authHeader.split(' ')[1];  // Az 'Authorization' headerb≈ël kinyerj√ºk a token-t
    const decoded = verifyToken(token);  // Haszn√°ljuk a verifyToken f√ºggv√©nyt

    if (decoded.role !== 'admin') {
      return res.status(403).json({ message: 'Nincs jogosults√°god az admin fel√ºlethez.' });
    }

    next();  // Ha admin, folytatjuk
  } catch (err) {
    return res.status(401).json({ message: '√ârv√©nytelen token.' });
  }
}

// üîê Admin adatlek√©r√©s (csak adminoknak)
router.get('/admin/data', isAdmin, async (req, res) => {
  const result = await pool.query('SELECT user_id, name, email, role FROM users');
  res.json(result.rows);
});

// üîí √öj user hozz√°ad√°sa admin √°ltal
router.post('/admin/user', isAdmin, async (req, res) => {
  const { name, email, password, role } = req.body;
  try {
    const hashed = await bcrypt.hash(password, 10);
    const result = await pool.query(
      'INSERT INTO users (name, email, password, role) VALUES ($1, $2, $3, $4)',
      [name, email, hashed, role]
    );
    res.json({ message: 'Felhaszn√°l√≥ hozz√°adva!' });
  } catch (err) {
    console.error('‚ùå Admin user hozz√°ad√°si hiba:', err);
    res.status(500).json({ error: 'Hiba t√∂rt√©nt a felhaszn√°l√≥ hozz√°ad√°sakor.' });
  }
});

// üîÑ Szerep m√≥dos√≠t√°sa
router.patch('/admin/user/:id/role', isAdmin, async (req, res) => {
  const userId = req.params.id;
  const { role } = req.body;
  try {
    await pool.query('UPDATE users SET role = $1 WHERE user_id = $2', [role, userId]);
    res.json({ message: 'Szerep friss√≠tve!' });
  } catch (err) {
    console.error('‚ùå Szerep friss√≠t√©si hiba:', err);
    res.status(500).json({ error: 'Hiba a szerep m√≥dos√≠t√°sa sor√°n.' });
  }
});

// ‚ùå T√∂rl√©s
router.delete('/admin/user/:id', isAdmin, async (req, res) => {
  const userId = req.params.id;
  try {
    await pool.query('DELETE FROM users WHERE user_id = $1', [userId]);
    res.json({ message: 'Felhaszn√°l√≥ t√∂r√∂lve!' });
  } catch (err) {
    console.error('‚ùå T√∂rl√©si hiba:', err);
    res.status(500).json({ error: 'Hiba a t√∂rl√©s sor√°n.' });
  }
});

// id≈ëk√©r√©ses adat (pl. id≈ëj√°r√°s t√≠pusok lek√©r√©se) API
router.get('/weather-types', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT DISTINCT ON (weather_type) weather_id, weather_type
      FROM weather
    `);
    res.json(result.rows);
  } catch (err) {
    console.error('‚ùå Hiba az id≈ëj√°r√°s t√≠pusok lek√©rdez√©s√©n√©l:', err);
    res.status(500).json({ error: 'Szerver hiba' });
  }
});

module.exports = router;
